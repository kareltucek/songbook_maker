#!/bin/bash

function help() {
  echo "syntax: make_songbook [options] <output name> <path to head.tex template> <version>"
  echo ""
  echo "Reads list of songs from stdin, builds a songbook out of them in its directory and outputs creted songbooks into the working directory."
  echo ""
  echo "args:"
  echo "output name - name used currently only as output file prefix"
  echo "header file - a .tex file containing songbook's introduction (see included example file)"
  echo "version - any string denoting version of the songbook"
  echo ""
  echo "valid options:"
  echo "  --debug        tests songs one by one"
  echo "  --imgpath      directory containing images"
  echo "  --nocleanup    do not cleanup workdir - for development purposes"
  echo "  --style        {compact|compact-doublesided|book|a4}" 
  echo "  --noimg        skips images in the output" 
  exit 1
}

function read_args() {
  if [ $# -lt 2 ]
  then
    help
  fi

  finished=0
  style=""
  while [ "$finished" == "0" ]
  do
    case $1 in 
      --debug)
        mode=test
        shift
        ;;
      --imgpath)
        imgpath=$2
        echo "setting imgpath to $(realpath "$2")"
        shift
        shift
        ;;
      --nocleanup)
        nocleanup=1
        shift
        ;;
      --noimg)
        noimg=1
        shift
        ;;
      --doublesided)
        doublesided=1
        shift
        ;;
      --style)
        case "$2" in 
          compact)
            style="$2"
            templates="$templates template-a5 template-a5-booklet"
            colmodes=adaptive
            colwidth=43
            pagenumstyle=numbers
            ;;
          compact-doublesided)
            style="$2"
            templates="$templates template-a5-doublesided template-a5-booklet-doublesided"
            colmodes=adaptive
            colwidth=43
            pagenumstyle=numbers
            ;;
          book)
            style="$2"
            templates="$templates template-a5-book template-a5-booklet-book"
            colmodes=adaptive
            colwidth=35
            pagenumstyle=pages
            ;;
          a4)
            style="$2"
            templates="$templates template-a4"
            colmodes=3cols
            colwidth=35
            pagenumstyle=numbers
            ;;
          *)
            echo "STYLE '$style' NOT VALID"
            ;;
        esac
        shift
        shift
        ;;
      *)
        mode=normal
        finished=1
        ;;
    esac
  done
  [ "$style" == "" ] && style=compact && templates="template-a5 template-a5-booklet" && colwidth=43 && colmodes=adaptive && pagenumstyle=numbers

  workdir=$(realpath "$0" | sed 's=/[^/]*$==g')
  [ "$imgpath" == "" ] || imgpath=`realpath "$imgpath"`
  origdir=`pwd`
  outdir=`pwd`

  name="$1"
  head="$2"
  version="$3"
  #colwidth=35
  #colwidth=30
  songs=`mktemp`
}

function prepare_environment() {
  cat | grep -v '[/]\..*.swp' | xargs realpath > $songs
  echo "$version" > $workdir/ver.tex
  cat "$head" > $workdir/head.tex
  cd "$workdir"
  [ "$imgpath" == "" ] || ln -s "$imgpath" imgpath
}

function process_file() {
  if [ -f $file ]
  then
    [ $mode == "test" ] || printf "PROCESSING $file" > /dev/tty
    width=$(cat $file | sed 's/\[[^]]*\]//g' | wc -L)
    [ $width -lt $colwidth -o $width -gt $(( $colwidth + 5 )) ] || printf "... is just a bit over colwidth! ..." > /dev/tty
    cols=$(( ( $colwidth /  $width ) + 1 ))
    [ $colmode == 3cols ] && cols=3
    #echo "\\songcolumns{$cols}"
    (
      echo "##_autocols:$cols"
      [ $colmode == 3cols ] && echo "##_widthmode:wide" || echo "##_widthmode:narrow"
      cat $file 
    ) | tr '\n\t' '\t\n' | sed 's/\t\t\t*/\t\t/g' | tr '\n\t' '\t\n' | sed 's/[#[]/\\&/g' | awk '
    BEGIN {header=1;}
    // { if (ignore == 1){ next; } }
    /===/ { 
      header = 0; 
      if(widthmode == "narrow" && narrowcols != "") { autocols = narrowcols; };
      if(widthmode == "wide" && widecols != "") { autocols = widecols; };
      printf("\\songcolumns{%s}\n", autocols);
      printf("\\beginsong{%s}[by={%s%s}]\n", title, version, author); 
      printf("\\phantomsection\n"); 
      if ("'"$pagenumstyle"'" == "pages") {
        printf("\\addcontentsline{toc}{subsection}{%s}\n", title);
      }
      if ("'"$pagenumstyle"'" == "both") {
        printf("\\addcontentsline{toc}{subsection}{\\numberline{\\thesongnum}%s}\n", title);
      }
      if ("'"$pagenumstyle"'" == "numbers") {
        printf("\\refstepcounter{section}\n");
        printf("\\addtocontents{toc}{%%\n\\protect\\contentsline{subsection}{%s%s}{\\numberline{\\thesongnum}}{section.\\thesection}}", version, title);
      }
      printf("\\beginverse\n"); 
      if(img1 != "" && widthmode == "narrow" && "'"$noimg"'" != "1") { printf("\\AddToShipoutPictureBG*{\\includegraphics[width=\\paperwidth,height=\\paperheight]{imgpath/%s}};", img1); }
      next;
    }
    /^ *$/ {printf("\\endverse\n\\beginverse\n"); next}
    /^\\#\\#title/ { gsub("^[^:]*:", "", $0); title=$0; next;}
    /^\\#\\#author/ { gsub("^[^:]*:", "", $0); author=$0; next;}
    /^\\#\\#_autocols/ { gsub("^[^:]*:", "", $0); autocols=$0; next;}
    /^\\#\\#_widthmode/ { gsub("^[^:]*:", "", $0); gsub("  *$", "", $0); widthmode=$0; next;}
    /^\\#\\#_narrowcols/ { gsub("^[^:]*:", "", $0); narrowcols=$0; next;}
    /^\\#\\#_widecols/ { gsub("^[^:]*:", "", $0); widecols=$0; next;}
    /^\\#\\#_version/ { gsub("^[^:]*:", "", $0); version=$0 " "; next;}
    /^\\#\\#_imgbegin/ { gsub("^[^:]*:", "", $0); gsub("  *$", "", $0);gsub("^  *", "", $0);img1=$0; next;}
    /^\\#\\#_imgend/ { gsub("^[^:]*:", "", $0); gsub("  *$", "", $0);gsub("^  *", "", $0);img2=$0; next;}
    /^\\#\\#_clearpage/ { clear=1; }
    /^\\#\\#_ignore/ { ignore=1; }
    /^\\#\\#/ {next;}
    // { if(header == 1 && title == ""){title = $0};}
    // { if(header == 1) { next; } }
    /^\\#/ {next;}
    // { printf("%s\n", $0); }
    END { 
      if ( ignore != 1 ) {
        printf("\n\\endverse\n");
        printf("\\endsong\n\n\n"); 
        if(img2 != "" && widthmode == "narrow" && "'"$noimg"'" != "1") { 
          printf("\\AddToShipoutPictureBG*{\\includegraphics[width=\\paperwidth,height=\\paperheight]{imgpath/%s}}", img2); 
        }
        if(clear == 1) {
          printf("\\clearpage");
        }
      }
    }
    ' | sed 's/&apos;/'"'"'/g;s/&quot;/"/g;s/[`´]/'"'"'/g;s/„/"/g;'
    [ $mode == "test" ] || printf "\n" > /dev/tty
  else
    echo FILE NOT FOUND: $file at pwd $(pwd) > /dev/tty
  fi
}

function process_songbook() {
  for colmode in $colmodes
  do
    echo "PROCESSING MODE $colmode" > /dev/tty
    echo "WRITTING CONTENT INTO $workdir/content-$colmode.tex" > /dev/tty
    cat $songs | 
    while read file 
    do
      process_file
    done > "$workdir/content-$colmode.tex"
  done

  #not compatible with images 
  #latex template-a5.tex  || cleanup 1
  
  build_pdfs $templates
}

function build_pdfs() {
  #the first pdflatex takes care of hyperlink preprocessing
  pdflatex $1
  while [ $# -gt 0 ] 
  do
    pdflatex $1 || cleanup 1
    shift
  done
}

function test_song() {
  printf "TESTING SONGFILE $file..."
  if [ -f "$file" ]
  then
    process_file > "$workdir/content-$colmode.tex"
    if pdflatex -interaction=batchmode template-a5.tex > /dev/null
    then
      echo " OK"
    else
      echo " FAILED" 
    fi
  else
    echo " NOT FOUND" 
  fi
}

function test_songbook() {
  echo "TESTED SONGS ARE:"
  cat $songs
  echo "TESTING SONGS ONE BY ONE" > /dev/tty
  colmode=adaptive
  cat $songs | 
  while read file 
  do
    test_song
  done 
}

function cleanup() {
  if [ "$nocleanup" == "1" ]
  then
    return
  fi
  echo "CLEANING UP"
  for i in template*pdf template*dvi
  do
    mv $i "$outdir/$(echo "$i" | sed 's/template/'"$name"'/g;')"
  done

  rm -f $songs cbtitle.* *.log content*tex ver.tex
  rm imgpath
  ls | grep 'template.*' | grep -v '.tex$' | xargs rm -f
  exit $1
}

function run() {
  echo '###########################'
  echo "PROCESSING SONGBOOK: $name with $head $version IN MODE: $mode" 
  echo '###########################'
  case "$mode" in
    normal)
      process_songbook
      cleanup 0
      ;;
    test)
      test_songbook
      cleanup 0
      ;;
  esac
}

read_args $@
prepare_environment
run

